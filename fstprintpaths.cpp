/*

fstprintpaths.cpp

traverses an fst and prints out all of the paths in that fst along with the costs.

output format is: WORD cost X.XX

where WORD is a sequence of characters accepted or generated by the fst AND X.XX 
is a floating point value representing the cost of traversing that structure.

author: chris taylor

OpenFst forum post title: "Natural code for printing all strings accepted by an FST?"
OpenFst forum post link: http://openfst.cs.nyu.edu/twiki/bin/view/Forum/FstForum#Natural_code_for_printing_all_st

*/
#include "fstprintpaths.hpp"

using namespace openfsttools;

void fstprintpaths::printAllStrings(StdVectorFst& fst, SymbolTable& st, string& seqToSkip, ProjectionEnum printInputOrOutput) 
{
        string str;
        TropicalWeight tw(TropicalWeight::One());
        printAllStringsHelper(fst, st, fst.Start(), str, tw, seqToSkip, printInputOrOutput);
}

void fstprintpaths::printAllStringsHelper(StdVectorFst& fst, SymbolTable& st, int state, string& str, TropicalWeight cost, string& seqToSkip, ProjectionEnum printInputOrOutput) 
{
        if(fst.Final(state) != TropicalWeight::Zero())
        {
            cout << str << " cost " << (Times(cost,fst.Final(state))) << endl;
            str = "";
            return;
        }

        for(ArcIterator< StdVectorFst > iter(fst,state); !iter.Done(); iter.Next()) 
        {
            StdArc arc = iter.Value();

            string symbol = (printInputOrOutput) == fstprintpaths::PROJECT_INPUT ? st.Find( arc.ilabel ) : st.Find( arc.olabel );

            if( symbol.compare( seqToSkip ) != 0 ) {
                str += symbol; 
            }

            printAllStringsHelper(fst, st, arc.nextstate, str, Times(cost, arc.weight.Value()), seqToSkip, printInputOrOutput);
        }
}


