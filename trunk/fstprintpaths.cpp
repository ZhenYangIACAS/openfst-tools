/*

fstprintpaths.cpp

traverses an fst and prints out all of the paths in that fst along with the costs.

output format is: WORD cost X.XX

where WORD is a sequence of characters accepted or generated by the fst AND X.XX 
is a floating point value representing the cost of traversing that structure.

author: chris taylor

OpenFst forum post title: "Natural code for printing all strings accepted by an FST?"
OpenFst forum post link: http://openfst.cs.nyu.edu/twiki/bin/view/Forum/FstForum#Natural_code_for_printing_all_st

*/
#include <vector>
#include <iostream>
#include<string>
#include<sstream>

#include "fst/fst.h"
#include "fst/compact-fst.h"
#include "fst/vector-fst.h"
#include "fst/float-weight.h" 

using namespace std;
using namespace fst;

enum ProjectionEnum { PROJECT_INPUT, PROJECT_OUTPUT } ;

string itos(int i);
void printAllStringsHelper(StdVectorFst& fst, SymbolTable& st, int state, string& str, TropicalWeight cost, string& seqToSkip, ProjectionEnum printInputOrOutput);
string vectorToString(vector<int>& v);

void printAllStrings(StdVectorFst& fst, SymbolTable& st, string& seqToSkip, ProjectionEnum printInputOrOutput = PROJECT_OUTPUT) 
{
    string str;
    TropicalWeight tw(TropicalWeight::One());
    printAllStringsHelper(fst, st, fst.Start(), str, tw, seqToSkip, printInputOrOutput);
}

void printAllStringsHelper(StdVectorFst& fst, SymbolTable& st, int state, string& str, TropicalWeight cost, string& seqToSkip, ProjectionEnum printInputOrOutput=PROJECT_OUTPUT) 
{
    if(fst.Final(state) != TropicalWeight::Zero())
    {
        cout << str << " cost " << (Times(cost,fst.Final(state))) << endl;
        str = "";
        return;
    }

    for(ArcIterator< StdVectorFst > iter(fst,state); !iter.Done(); iter.Next()) 
    {
        StdArc arc = iter.Value();

        string symbol = (printInputOrOutput) == PROJECT_INPUT ? st.Find( arc.ilabel ) : st.Find( arc.olabel );

        if( symbol.compare( seqToSkip ) != 0 ) {
            str += symbol; 
        }

        printAllStringsHelper(fst, st, arc.nextstate, str, Times(cost, arc.weight.Value()), seqToSkip, printInputOrOutput);
    }
}

string vectorToString(vector<int>& v) 
{
    if(v.size() == 0) { return "<>"; }

    string result = "<" + itos(v[0]);
    for(int i = 1; i < v.size(); i++) 
    {
        result + "," + itos(v[i]);
    }

    return result + ">";
}

// convert int to string from Bjarne Stroustrup's FAQ
string itos(int i) 
{ 
    stringstream s;
    s << i;
    return s.str();
}

int main(int argc, char** argv)
{
    if(argc < 2) { fprintf(stderr, "requires an openfst fst input file to print!\n"); }

    string* seqToSkip = NULL;

    if(argc == 4) { 
       seqToSkip = new string( argv[3] );
    }
    else {
        seqToSkip = new string( "<EPS>" );
    }

    string symtabFilename(argv[1]);
    SymbolTable* st = SymbolTable::ReadText(symtabFilename);

    string fstToPrintFilename(argv[2]);
    StdVectorFst* finalFst = StdVectorFst::Read(fstToPrintFilename);

    printAllStrings( (*finalFst), (*st), (*seqToSkip) );    

    delete st;
    delete finalFst;
    if(seqToSkip != NULL) { delete seqToSkip; }
}
